@page "/investigators"
@using CurrieTechnologies.Razor.SweetAlert2
@using ScientificResearch.Shared.Entities
@using ScientificResearch.WEB.Repositories
@using ScientificResearch.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Investigators
            <a class="btn btn-primary btn-sm float-end" href="/investigators/create"><i class="bi bi-plus-circle" />New Investigator</a>

        </span>
</div>

    <div class="card-body">

<GenericList MyList="Investigators">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                        @foreach (var item in Investigators!)
                {
                    <tr>
                        <td>
                                    <a href="/investigators/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                    <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill"/> Borrar</button>
                        </td>
                        
                        <td>
                            @item.Id
                        </td>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.specialty
                        </td>
                        
                            <td>
                            @item.membership
                        </td>

                       
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
    </div>
</div>


@code {
    public List<Investigator>? Investigators { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await Repository.GetAsync<List<Investigator>>("api/investigators");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Investigators = responseHttp.Response;
    }

   

    private async Task DeleteAsycn(Investigator investigator)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar el investigador: {investigator.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await Repository.DeleteAsync<Investigator>($"api/investigators/{investigator.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("investigators");
                }
                else
                {
                    var mensajeError = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                }
                return;
            }

            await LoadAsync();
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 4000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
        }
    
}